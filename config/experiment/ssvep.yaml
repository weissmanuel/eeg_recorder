
sources:
  - - ${headset.source_id}
    - 'EEG'
  - - 'ssvep_train_markers'
    - 'MARKER'

persister: 'mne_raw_persister'
persisting_mode: 'replace'
persister_workers: null
#persister_workers:
#  - name: 'default'
#    interval: 30

labels: [6, 10, 15, 19]
window_size_seconds: 1
window_shift_seconds: 0.1
signal_duration_seconds: 15
event_offset_seconds: 2

visualisation_window_size_seconds: 5

raw_preprocessors:
  - name: 'notch_filter'
    kwargs:
      freqs: 50
      method: 'iir'
      filter_length: 'auto'
      notch_widths: 10
  - name: 'bandpass_filter'
    kwargs:
      low_cut: 4
      high_cut: 64
      method: 'fir'
#  - name: 'reference'
#    kwargs:
#      ref_channels: 'average'

epoch_preprocessors:
  - name: 'bandpass_filter'
    kwargs:
      low_cut: 4
      high_cut: 64
      method: 'iir'

training:
  enabled: True
  type: 'ssvep'
  pipeline_path: './data/models/ssvep_pipeline.pth'
  pipeline:
#    - name: 'CCA'
#      kwargs:
#        sfreq: ${headset.sfreq}
#        target_frequencies: ${experiment.labels}
#        signal_duration_seconds: ${experiment.window_size_seconds}
#        n_harmonics: 4
    - name: 'consecutive_majority_vote_classifier'
      kwargs:
        window_size: 5
        base_classifier:
          - name: 'CCA'
            kwargs:
              sfreq: ${headset.sfreq}
              target_frequencies: ${experiment.labels}
              signal_duration_seconds: ${experiment.window_size_seconds}
              n_harmonics: 4
#    - name: 'filterbank'
#      kwargs:
#        sfreq: ${headset.sfreq}
#    - name: 'CCA'
##     - name: 'ECCA'
##     - name: 'MSCCA_AND_MSETRCA'
#      kwargs:
#        sfreq: ${headset.sfreq}
#        target_frequencies: ${experiment.labels}
#        signal_duration_seconds: ${experiment.window_size_seconds}
#        n_jobs: 4

#    - name: 'fft'
#      kwargs: {}
##    - name: 'averager'
##      kwargs:
##        window_size: 2
#    - name: 'channel_reshape'
#      kwargs: {}
##    - name: 'random_forest'
##      kwargs: {}
#    - name: 'consecutive_majority_vote_classifier'
#      kwargs:
#        window_size: 5
#        base_classifier:
#          name: 'random_forest'
#          kwargs: {}

decoding:
  type: 'model' # threshold, model
#  type: 'threshold' # threshold, model
  decoder_path: ${experiment.training.pipeline_path}